@inject AlarmPP.Web.Services.AppData AppData
@inject IJSRuntime JSRuntime
@inject IMatToaster Toaster
@using ALARm.Core.Report

@if (AppData != null && AppData.Data != null)
{
    <p>@AppData.Data[(int)Services.Series.Section] –ü—É—Ç—å: @AppData.CurrentKilometer.Track_name –ö–º: @AppData.CurrentKm –ú:@AppData.CurrentKmMeter –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ @AppData.CurrentKilometer.Direction_name: –ü–µ—Ä–µ–≥–æ–Ω :@AppData.CurrentKilometer.Sector </p>
}

<div class="row">
    <div class="column">
        <MatSlideToggle Value="@AppData.VideoProcessing" ValueChanged="(async (bool i) => await OnTimedEventAsync())">@(!AppData.VideoProcessing ? "–ü–∞—É–∑–∞" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")</MatSlideToggle>
        <MatNumericUpDownField @bind-Value="@N_rows" Label="–ö–æ–ª-–≤–æ –∫–∞–¥—Ä–æ–≤"></MatNumericUpDownField>
        <MatSlider @bind-Value="@AppData.Speed" ValueMin="1" ValueMax="100" Label="–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–æ—Ç–∫–∏" Style="width:100px"></MatSlider>
    </div>
    <div class="column">
        <MatNumericUpDownField @bind-Value="@Number" Label="–ö–∏–ª–æ–º–µ—Ç—Ä"></MatNumericUpDownField><br />
        <label>–ú–µ—Ç—Ä: @CurrentMeter</label><br />
        <label>–ü–∏–∫–µ—Ç: @(CurrentMeter/100+1)</label><br />
        <label>–ö–∞–¥—Ä: @CurrentVideoFrame</label>
    </div>
    <div class="column">
        <AlarmButton Text="" Symbol="‚¨ÖÔ∏è" Tooltip="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–¥—Ä" OnClick="() => PrevClick()"></AlarmButton>
        <AlarmButton Text="" Symbol="‚û°Ô∏è" Tooltip="–°–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä" OnClick="() => NextClick()"></AlarmButton>
    </div>
</div>


<div class="row">
    <div id="imgdiv1" style="width:100%">
        <img src="data:image/jpeg;base64,@Base64" />
    </div>
</div>
<MatButton Raised="true" Text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" OnClick="() => GetObjectsFromFrame()"></MatButton>



<MatDialog @bind-IsOpen="@ObjectsDialog" Stacked="true" Style="width:40%; height:30%">
    <MatDialogTitle>–î–µ—Ñ–µ–∫—Ç—ã –ø—É—Ç–∏ –Ω–∞ @CurrentMeter –º–µ—Ç—Ä–µ</MatDialogTitle>
    <MatDialogContent>
        @if (Gaps != null && Gaps.Count > 0)
        {
            <h2>–°—Ç—ã–∫–æ–≤—ã–µ –∑–∞–∑–æ—Ä—ã:</h2>
            <table>
                <tr>
                    <th style="border-right: 1px solid grey; width:35px;">–ö–º</th>
                    <th style="border-right: 1px solid grey; width: 35px;">–ú</th>
                    <th style="border-right: 1px solid grey; width: 110px;">–û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 90px;">–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–ó–∞–∑–æ—Ä—ã</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–û–≥—Ä. —Å–∫–æ—Ä.</th>
                    <th style="border-right: 1px solid grey; width: 50px;">–ë–∞–ª–ª</th>
                    <th style="border-right: 1px solid grey; width: 125px;"></th>
                </tr>
                <tbody>
                    @foreach (var digression in Gaps.Select((value, i) => new { i, value }))
                    {
                        <tr>
                            <td style="border-right: 1px solid grey; width: 35px;">@Number</td>
                            <td style="border-right: 1px solid grey;  width:35px;">@digression.value.Meter</td>
                            <td style="border-right: 1px solid grey;  width:110px;">@digression.value.Otst</td>
                            <td style="border-right: 1px solid grey;   width:90px;"></td>
                            <td style="border-right: 1px solid grey; width: 125px;">@($"–ó –ª:{digression.value.Zazor} –ó –ø—Ä:{digression.value.R_zazor}")</td>
                            <td style="border-right: 1px solid grey; width: 125px;">@("–û–≥—Ä.—Å–∫: " + digression.value.Vdop )</td>
                            <th style="border-right: 1px solid grey; width: 50px;">@(digression.value.GetPoint() == -1 ? "-": digression.value.GetPoint())</th>
                            <td>
                                <AlarmButton Text="" Symbol="Ó†ß" Tooltip="–£–¥–∞–ª–∏—Ç—å" OnClick="() => DigressionTable.DeleteGapClick(digression.value)"></AlarmButton>
                                <AlarmButton Text="" Symbol="Ó†§" Tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" OnClick="() => DigressionTable.GetImageGaps(digression.value, digression.i, 1)"></AlarmButton>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>

        }
        else if (Fasteners != null && Fasteners.Count > 0)
        {
            <h2>–°–∫—Ä–µ–ø–ª–µ–Ω–∏—è:</h2>
            <table>
                <tr>
                    <th style="border-right: 1px solid grey; width:35px;">–ö–º</th>
                    <th style="border-right: 1px solid grey; width: 35px;">–ú</th>
                    <th style="border-right: 1px solid grey; width: 110px;">–û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 90px;">–°–∫—Ä–µ–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–°—Ç–æ—Ä–æ–Ω–∞</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–ë–∞–ª–ª</th>
                    <th style="border-right: 1px solid grey; width: 125px;"></th>
                </tr>
                @foreach (var fastener in Fasteners.Select((value, i) => new { i, value }))
                {
                    <tr>
                        <td style="border-right: 1px solid grey; width: 35px;">@Number</td>
                        <td style="border-right: 1px solid grey;  width:35px;">@fastener.value.Mtr</td>
                        <td style="border-right: 1px solid grey;  width:110px;">@fastener.value.Otst</td>
                        <td style="border-right: 1px solid grey;   width:90px; text-align:right">@fastener.value.Fastening</td> @*—Å–∫—Ä–µ–ø–µ–ª–Ω–∏–µ*@
                        <td style="border-right: 1px solid grey; width: 125px;">@fastener.value.Threat_id</td>
                        <td style="border-right: 1px solid grey; width: 125px;"></td>
                        <td>
                            <AlarmButton Text="" Symbol="Ó†ß" Tooltip="–£–¥–∞–ª–∏—Ç—å" OnClick="() => DigressionTable.DeleteFastenerClick(fastener.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="Ó†§" Tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" OnClick="() => DigressionTable.ModifyFastenerClick(fastener.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="üì∑" Tooltip="–§–æ—Ç–æ" OnClick="() => DigressionTable.GetImageFasteners(fastener.value, fastener.i, 3)"></AlarmButton>
                        </td>
                    </tr>
                }

            </table>
        }
        else if (Bolts != null && Bolts.Count > 0)
        {
            <h2>–ë–æ–ª—Ç—ã:</h2>
            <table>
                <tr>
                    <th style="border-right: 1px solid grey; width:35px;">–ö–º</th>
                    <th style="border-right: 1px solid grey; width: 35px;">–ú</th>
                    <th style="border-right: 1px solid grey; width: 110px;">–ù–∞–∫–ª–∞–¥–∫–∞</th>
                    <th style="border-right: 1px solid grey; width: 90px;">–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–î–æ —Å—Ç—ã–∫–∞</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–ü–æ—Å–ª–µ —Å—Ç—ã–∫–∞</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–û–≥—Ä. —Å–∫–æ—Ä.</th>
                    <th style="border-right: 1px solid grey; width: 125px;"></th>
                </tr>
                @foreach (var bolt in Bolts.Select((value, i) => new { i, value }))
                {
                    <tr>
                        <td style="border-right: 1px solid grey; width:35px; ">@bolt.value.Meter</td>
                        <td style="border-right: 1px solid grey; width:110px;">@bolt.value.Overlay</td>
                        <td style="border-right: 1px solid grey; width:90px; "></td>
                        <td style="border-right: 1px solid grey; width: 125px;">@(bolt.value.Before)</td>
                        <td style="border-right: 1px solid grey; width: 125px;">@(bolt.value.After)</td>
                        <td style="border-right: 1px solid grey; width: 125px;">
                            @("–û–≥—Ä.—Å–∫: " + bolt.value.FullSpeed )
                        </td>
                        <td>
                            <AlarmButton Text="" Symbol="Ó†ß" Tooltip="–£–¥–∞–ª–∏—Ç—å" OnClick="() => DigressionTable.DeleteBoltClick(bolt.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="Ó†§" Tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" OnClick="() =>  DigressionTable.ModifyBoltClick(bolt.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="üì∑" Tooltip="–§–æ—Ç–æ" OnClick="() => DigressionTable.GetImageBolts(bolt.value, bolt.i, 2)"></AlarmButton>
                        </td>
                    </tr>
                }
            </table>
        }
        else if (DefShpals != null && DefShpals.Count > 0)
        {
            <h2>–î–µ—Ñ—Ñ–µ–∫—Ç–Ω—ã–µ —à–ø–∞–ª—ã:</h2>
            <table>
                <tr>
                    <th style="border-right: 1px solid grey; width:35px;">–ö–º</th>
                    <th style="border-right: 1px solid grey; width: 35px;">–ú</th>
                    <th style="border-right: 1px solid grey; width: 110px;">–û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 90px;">–°–∫—Ä–µ–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;"></th>
                </tr>
                @foreach (var digression in DefShpals.Select((value, i) => new { i, value }))
                {
                    <tr>
                        <td style="border-right: 1px solid grey;  width: 35px;">@Number</td>
                        <td style="border-right: 1px solid grey;  width:35px; ">@digression.value.Meter</td>
                        <td style="border-right: 1px solid grey;  width:110px; ">@digression.value.Otst</td>
                        <td style="border-right: 1px solid grey;   width:90px; ">@digression.value.Fastening</td>
                        <td style="border-right: 1px solid grey;  width: 125px; ">@digression.value.Meropr</td>
                        <td style="border-right: 1px solid grey; width: 125px;">@digression.value.Notice</td>
                        <td>
                            <AlarmButton Text="" Symbol="Ó†ß" Tooltip="–£–¥–∞–ª–∏—Ç—å" OnClick="() => DigressionTable.DeleteDefShpalClick(digression.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="Ó†§" Tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" OnClick="() => DigressionTable.ModifyDefShpalClick(digression.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="üì∑" Tooltip="–§–æ—Ç–æ" OnClick="() => DigressionTable.GetImageDefShpals(digression.value, digression.i, 5)"></AlarmButton>
                        </td>
                    </tr>
                }
            </table>
        }
        else if (PerShpals != null && PerShpals.Count > 0)
        {
            <h2>–ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã–µ —à–ø–∞–ª—ã:</h2>
            <table>
                <tr>
                    <th style="border-right: 1px solid grey; width:35px;">–ö–º</th>
                    <th style="border-right: 1px solid grey; width: 35px;">–ú</th>
                    <th style="border-right: 1px solid grey; width: 110px;">–û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 90px;">–ì—Ä–∞–¥—É—Å</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–°–∫—Ä–µ–ø–ª–µ–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
                    <th style="border-right: 1px solid grey; width: 125px;"></th>
                </tr>
                @foreach (var digression in PerShpals.Select((value, i) => new { i, value }))
                {
                    <tr>
                        <td style="border-right: 1px solid grey;  width: 35px;">@Number</td>
                        <td style="border-right: 1px solid grey;  width:35px;">@digression.value.Meter</td>
                        <td style="border-right: 1px solid grey;  width:110px;">@digression.value.Otst</td>
                        <td style="border-right: 1px solid grey;   width:90px; ">@digression.value.Angle.ToString("0.00")</td>
                        <td style="border-right: 1px solid grey; width: 125px;">@digression.value.Fastener</td>
                        <td style="border-right: 1px solid grey; width: 125px;"></td>
                        <td>
                            <AlarmButton Text="" Symbol="Ó†ß" Tooltip="–£–¥–∞–ª–∏—Ç—å" OnClick="() => DigressionTable.DeletePerShpalClick(digression.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="Ó†§" Tooltip="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" OnClick="() => DigressionTable.ModifyPerShpalClick(digression.value)"></AlarmButton>
                            <AlarmButton Text="" Symbol="üì∑" Tooltip="–§–æ—Ç–æ" OnClick="() => DigressionTable.GetImagePerShpals(digression.value, digression.i, 4)"></AlarmButton>
                        </td>
                    </tr>
                }
            </table>
        }
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" OnClick="_=> { ObjectsDialog = false;}">–ó–∞–∫—Ä—ã—Ç—å</MatButton>
    </MatDialogActions>
</MatDialog>




